[{"path":"/articles/Bivariate_Simulation.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"Simulating Bivariate Cells","text":"cases, 2 cell types wanted assess well different methods able pick colocalization segregation. mIFsim, implemented way perform simulated cell arrangements.","code":""},{"path":"/articles/Bivariate_Simulation.html","id":"libraries","dir":"Articles","previous_headings":"","what":"Libraries","title":"Simulating Bivariate Cells","text":"order get started simulating bivariate multiple immunofluorescence (mIF) samples, need import package.","code":"library(mIFsim) #> mIFsim Version: #> 0.0.0.9000 #>             _____ ______   _ #>            |_   _|  ____| (_) #>   _ __ ___   | | | |__ ___ _ _ __ ___ #>  | '_ ` _ \\  | | |  __/ __| | '_ ` _ \\ #>  | | | | | |_| |_| |  \\__ \\ | | | | | | #>  |_| |_| |_|_____|_|  |___/_|_| |_| |_| #>  Fridley Lab Enjoy"},{"path":"/articles/Bivariate_Simulation.html","id":"running-mifsim","dir":"Articles","previous_headings":"","what":"Running mIFsim","title":"Simulating Bivariate Cells","text":"create simulation object, can call create_simObject, takes 3 arguments initialize object downstream functions: window - spatstat window object boundary simulate points sims - integer value number samples wanting simulated cell_types - number different phenotypes simulate, 2 CD3+ CD19+ window isn’t specified built 10x10 used. Let’s create simulation object. number simulations also defaulted 3 assessing colocalization methods, probably want use lot get confidence use 9. Using summary method, can see simulation object inside need next. , 9 simulations default window wanting perform 2 cell types. method really useful fine tuning parameters get desired output shows exactly already done loading base object RDS file. Now simulation object parameters set within, need create point pattern process. GenerateSpatialProcess function takes spatial simulation object lambda, intensity point process. NOTE: large windows large lambdas, size spatial simulation object can grow fast mindful. parameters passed spatstat.random::rpoispp can passed GenerateSpatialProcess end. , can check filling slots summary even see new process looks like plot.  Next generate regions tumor stroma. parameters initialized building spatial simulation tells downstream functions simulate things Gaussian kernel - GenerateTissue one . nothing supplied function calling, default values. Alternatively, can specify function call. include regions within window like tissue regions simulated, number regions, standard deviation range probability falls around region centers, etc. Something whether ending kernel converted heatmap resolution. NOTE: smaller step_size used heatmap longer takes run mindful. metrics changed, can recalled later know exactly used generate data. simulating tissues can look summary spatial simulation object see newly filled slot. tissue kernel slot now filled number kernels matching number spatial processes . Let’s take look simulated tissue kernels PlotSimulation tissue heatmap.  kernels randomly laid simulation region random sizes within constraints parameters used. number tissue regions simulated fixed input k value, sampled distribution centered k. larger sdmin sdmax increase sizes tissue regions. Generating holes can help assess need correcting spatial statistic metrics derived. example, pond center field (hole), crops able planted yet measuring amount field just outside border (window) say lots crops able fit. Sometimes, things need adjusted . Even using holes assessing metrics, performing just create new column spatial files can later ignored. parameters go GenerateHoles similar GenerateTissue one addition: hole_prob proportion range point processes become holes. parameters defaults set spatial simulation object created, can overridden particular area process wanted holes rest (x y min max ranges). number holes random long sum area within proportions . Let’s see kernels holes look. center holes highest probability removed Bernoulli distribution ‘hole’ ‘hole’. parameter now “hole heatmap”.  Next thing us simulate positivity cells phenotype. Just like holes tissue, boundaries simulated positive cells fall stored parameters. helpful going back seeing done. However , 2 different parameters help set abundance (probs) , case multiple cell types, related cell types (correlation). probs parameter used scale probabilities cell type first number away kernel peaks second maximum probability cell. higher abundance, maximum probability can set higher even increase minimum probability. issue point processes multiple cell types entirely informed one another assigning cell types. B cells T cells distinct phenotypes therefore one cell shouldn’t positive . , use probability Bernoulli distribution ’s chance single cell positive 2 cell types, even max probability 0.1. Sometimes want study clustering dispersion different cell types. case, want make either alike (positive correlation) different (negative correlation). background take probability first cell simulated adjust according correlation parameter. kernels spatial simulation object cell types, time creating density heatmap assigning cell positive/negative, probabilities adjusted. Play around positive negative correlations see happens. multiple cells simulated, can see heatmap cell type 2 copied adjusted correltation much faster calculating density heatmap kernel. Lets look new cells distributed mIF correlation -1. means cell types segregated Cell 1 closer Cell 1 Cell 2 closer Cell 2. , cell probability positive always ‘noise’ trend .  Lastly, data likely wanted tabular format. Since multiple simulated point processes, function CreateSpatialList returns list data frames containing cell x y locations, tissue cell belongs , whether cell falls hole, positivity different cell types. spatial list can now used packages like spatialTIME compute spatial statistics simulated data frames.","code":"sim_object = CreateSimulationObject(sims = 9, cell_types = 2) #> Loading required package: spatstat #> Loading required package: spatstat.data #> Loading required package: spatstat.geom #> spatstat.geom 3.2-1 #> Loading required package: spatstat.random #> spatstat.random 3.1-5 #> Loading required package: spatstat.explore #> Loading required package: nlme #> spatstat.explore 3.2-1 #> Loading required package: spatstat.model #> Loading required package: rpart #> spatstat.model 3.2-4 #> Loading required package: spatstat.linnet #> spatstat.linnet 3.1-1 #>  #> spatstat 3.0-6  #> For an introduction to spatstat, type 'beginner' #> No `window` specified - defaulting to x (0, 10); y (0, 10) summary(sim_object) #> Spatial Simulation object for 9 simulations. Currently, there are: #>  Window: x (0,10); y (0,10) #>  0 spatial processes #>  0 tissue kernels #>  0 hole kernels #>  0 cell kernels for 2 cell types sim_object = GenerateSpatialProcess(sim_object) summary(sim_object) #> Spatial Simulation object for 9 simulations. Currently, there are: #>  Window: x (0,10); y (0,10) #>  9 spatial processes #>  0 tissue kernels #>  0 hole kernels #>  0 cell kernels for 2 cell types plot(sim_object) sim_object = GenerateTissue(sim_object, density_heatmap = T, step_size = 0.1, cores = 1) #> Computing density heatmap #> Computing tissue probability summary(sim_object) #> Spatial Simulation object for 9 simulations. Currently, there are: #>  Window: x (0,10); y (0,10) #>  9 spatial processes #>  9 tissue kernels #>  0 hole kernels #>  0 cell kernels for 2 cell types PlotSimulation(sim_object, which = 1:4, ncol = 2, nrow = 2, what = \"tissue heatmap\") #> Loading required package: ggplot2 sim_object = GenerateHoles(sim_object, density_heatmap = T, step_size = 0.1, cores = 1) #> Computing density heatmap #> Computing hole probability summary(sim_object) #> Spatial Simulation object for 9 simulations. Currently, there are: #>  Window: x (0,10); y (0,10) #>  9 spatial processes #>  9 tissue kernels #>  9 hole kernels #>  0 cell kernels for 2 cell types PlotSimulation(sim_object, which = 1:4, ncol = 2, nrow = 2, what = \"hole heatmap\") sim_object = GenerateCellPositivity(sim_object, k = 4,                                     sdmin = 3, sdmax = 5,                                     density_heatmap = T, step_size = 0.1, cores = 1, probs = c(0.0, 0.1),                                     correlation = -1) #> Computing density heatmap for Cell 1 #> Computing probability for Cell 1 #> Adjusting density heatmap for Cell 2 #> Computing probability for Cell 2 summary(sim_object) #> Spatial Simulation object for 9 simulations. Currently, there are: #>  Window: x (0,10); y (0,10) #>  9 spatial processes #>  9 tissue kernels #>  9 hole kernels #>  9 cell kernels for 2 cell types PlotSimulation(sim_object, which = 1, what = \"whole core\") spatial_list = CreateSpatialList(sim_object = sim_object) #> Loading required package: dplyr #>  #> Attaching package: 'dplyr' #> The following object is masked from 'package:nlme': #>  #>     collapse #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union"},{"path":"/articles/Univariate_Simulation.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"Simulating Univariate Cells","text":"development novel clustering algorithms require ability create many samples controlled manner. Previously, used existing methods Ripley’s K classify multiple immunofluorescence (mIF) samples","code":""},{"path":"/articles/Univariate_Simulation.html","id":"libraries","dir":"Articles","previous_headings":"","what":"Libraries","title":"Simulating Univariate Cells","text":"order get started simulating multiple immunofluorescence (mIF) samples, need import tha package.","code":"library(mIFsim) #> mIFsim Version: #> 0.0.0.9000 #>             _____ ______   _ #>            |_   _|  ____| (_) #>   _ __ ___   | | | |__ ___ _ _ __ ___ #>  | '_ ` _ \\  | | |  __/ __| | '_ ` _ \\ #>  | | | | | |_| |_| |  \\__ \\ | | | | | | #>  |_| |_| |_|_____|_|  |___/_|_| |_| |_| #>  Fridley Lab Enjoy"},{"path":"/articles/Univariate_Simulation.html","id":"running-mifsim","dir":"Articles","previous_headings":"","what":"Running mIFsim","title":"Simulating Univariate Cells","text":"create simulation object, can call create_simObject, takes 3 arguments initialize object downstream functions: window - spatstat window object boundary simulate points sims - integer value number samples wanting simulated cell_types - number different phenotypes simulate, going single cell type window isn’t specified built 10x10 used. Let’s create simulation object. simulation object attribute gradually filled progress. Using summary method, can see simulation object inside need next. , 9 simulations default window wanting perform single cell type. method really useful fine tuning parameters get desired output shows exactly already done loading base object RDS file. simulation object parameters set within, need create point pattern process. GenerateSpatialProcess function takes spatial simulation object lambda, intensity point process. NOTE: large windows large lambdas, size spatial simulation object can grow fast mindful. parameters passed spatstat.random::rpoispp can passed GenerateSpatialProcess end. , can check filling slots summary even see new process looks like plot.  Next generate regions tumor stroma. parameters initialized building spatial simulation tells downstream functions simulate things Gaussian kernel - GenerateTissue one . nothing supplied function calling, default values. Alternatively, can specify function call. include regions within window like tissue regions simulated, number regions, standard deviation range probability falls around region centers, etc. Something whether ending kernel converted heatmap resolution. NOTE: smaller step_size used heatmap longer takes run mindful. simulating tissues can look summary spatial simulation object see newly filled slot. tissue kernel slot now filled number kernels matching number spatial processes . Let’s take look simulated tissue kernels PlotSimulation.  kernels randomly laid simulation region random sizes within constraints parameters used. number tissue regions simulated fixed input k value, sampled distribution centered k. larger sdmin sdmax increase sizes tissue regions. Currently, next step required may future. Generating holes can help assess need correcting metrics derived spatial statistics. example, pond center field, crops able planted yet measuring amount field just outside border say lots crops able fit. Sometimes, things need adjusted . Even using holes assessing metrics, performing just create new column spatial files can later ignored. parameters go GenerateHoles similar GenerateTissue one addition: hole_prob proportion range point processes become holes. parameters defaults set spatial simulation object created, can overridden particular area process wanted holes rest. number holes random long sum area within proportions . Let’s see kernels holes look. center holes highest probability removed Bernoulli distribution ‘hole’ ‘hole’.   Next thing us simulate positivity cells phenotype. Just like holes tissue, boundaries simulated positive cells fall stored parameters. helpful going back seeing done. However , 2 different parameters help set abundance (probs) , case multiple cell types, related cell types (correlation). probs parameter used scale probabilities cell type first number away kernel peaks second maximum probability cell. higher abundance, maximum probability can set higher even increase minimum probability. issue point processes multiple cell types entirely informed one another assigning cell types. B cells T cells distinct phenotypes therefore one cell shouldn’t positive . , use probability Bernoulli distribution ’s chance single cell positive 2 cell types, even max probability 0.1. univariate clustering, smaller standard deviations higher probability range increase amount clustering. Large standard deviations low probabilities make clustering metrics low. univariate cell simulation, correlation metric nothing. plot simulation object now specifying want see whole core, can see cells. little pockets positive cells also noise.  Lastly, data likely wanted tabular format. Since multiple simulated point processes, function CreateSpatialList returns list data frames containing cell x y locations, tissue cell belongs , whether cell falls hole, positivity different cell types. spatial list can now used packages like spatialTIME compute spatial statistics simulated data frames.","code":"sim_object = CreateSimulationObject(sims = 9, cell_types = 1) #> Loading required package: spatstat #> Loading required package: spatstat.data #> Loading required package: spatstat.geom #> spatstat.geom 3.2-1 #> Loading required package: spatstat.random #> spatstat.random 3.1-5 #> Loading required package: spatstat.explore #> Loading required package: nlme #> spatstat.explore 3.2-1 #> Loading required package: spatstat.model #> Loading required package: rpart #> spatstat.model 3.2-4 #> Loading required package: spatstat.linnet #> spatstat.linnet 3.1-1 #>  #> spatstat 3.0-6  #> For an introduction to spatstat, type 'beginner' #> No `window` specified - defaulting to x (0, 10); y (0, 10) summary(sim_object) #> Spatial Simulation object for 9 simulations. Currently, there are: #>  Window: x (0,10); y (0,10) #>  0 spatial processes #>  0 tissue kernels #>  0 hole kernels #>  0 cell kernels for 1 cell types sim_object = GenerateSpatialProcess(sim_object) summary(sim_object) #> Spatial Simulation object for 9 simulations. Currently, there are: #>  Window: x (0,10); y (0,10) #>  9 spatial processes #>  0 tissue kernels #>  0 hole kernels #>  0 cell kernels for 1 cell types plot(sim_object) sim_object = GenerateTissue(sim_object, density_heatmap = T, step_size = 0.1, cores = 1) #> Computing density heatmap #> Computing tissue probability summary(sim_object) #> Spatial Simulation object for 9 simulations. Currently, there are: #>  Window: x (0,10); y (0,10) #>  9 spatial processes #>  9 tissue kernels #>  0 hole kernels #>  0 cell kernels for 1 cell types PlotSimulation(sim_object, which = 1:4, ncol = 2, nrow = 2, what = \"tissue heatmap\") #> Loading required package: ggplot2 sim_object = GenerateHoles(sim_object, density_heatmap = T, step_size = 0.1, cores = 1) #> Computing density heatmap #> Computing hole probability summary(sim_object) #> Spatial Simulation object for 9 simulations. Currently, there are: #>  Window: x (0,10); y (0,10) #>  9 spatial processes #>  9 tissue kernels #>  9 hole kernels #>  0 cell kernels for 1 cell types PlotSimulation(sim_object, which = 1:8, ncol = 2, nrow = 2, what = \"hole heatmap\") #> $`1` #>  #> $`2` #>  #> attr(,\"class\") #> [1] \"list\"      \"ggarrange\" sim_object = GenerateCellPositivity(sim_object, k = 4,                                     sdmin = 3, sdmax = 5,                                     density_heatmap = T, step_size = 0.1, cores = 1, probs = c(0.0, 0.1),                                     correlation = -1) #> Computing density heatmap for Cell 1 #> Computing probability for Cell 1 summary(sim_object) #> Spatial Simulation object for 9 simulations. Currently, there are: #>  Window: x (0,10); y (0,10) #>  9 spatial processes #>  9 tissue kernels #>  9 hole kernels #>  9 cell kernels for 1 cell types PlotSimulation(sim_object, which = 1, what = \"whole core\") spatial_list = CreateSpatialList(sim_object = sim_object) #> Loading required package: dplyr #>  #> Attaching package: 'dplyr' #> The following object is masked from 'package:nlme': #>  #>     collapse #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union #> Warning in `[<-.data.frame`(`*tmp*`, , assignment_cols, value = list(0, : #> provided 2492 variables to replace 1 variables #> Warning in `[<-.data.frame`(`*tmp*`, , assignment_cols, value = list(0, : #> provided 2463 variables to replace 1 variables #> Warning in `[<-.data.frame`(`*tmp*`, , assignment_cols, value = list(0, : #> provided 2488 variables to replace 1 variables #> Warning in `[<-.data.frame`(`*tmp*`, , assignment_cols, value = list(0, : #> provided 2448 variables to replace 1 variables #> Warning in `[<-.data.frame`(`*tmp*`, , assignment_cols, value = list(0, : #> provided 2496 variables to replace 1 variables #> Warning in `[<-.data.frame`(`*tmp*`, , assignment_cols, value = list(0, : #> provided 2507 variables to replace 1 variables #> Warning in `[<-.data.frame`(`*tmp*`, , assignment_cols, value = list(0, : #> provided 2498 variables to replace 1 variables #> Warning in `[<-.data.frame`(`*tmp*`, , assignment_cols, value = list(0, : #> provided 2450 variables to replace 1 variables #> Warning in `[<-.data.frame`(`*tmp*`, , assignment_cols, value = list(1, : #> provided 2461 variables to replace 1 variables"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Samantha Bothwell. Author. Alex Soupir. Author. Julia Wrobel. Author. Oscar Ospina. Author. Brooke Fridley. Author. Fridley Lab. Maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bothwell S, Soupir , Wrobel J, Ospina O, Fridley B (2023). mIFsim: Simulation Multiplex Immunofluorescence (mIF) Data. R package version 0.0.0.9000.","code":"@Manual{,   title = {mIFsim: Simulation of Multiplex Immunofluorescence (mIF) Data},   author = {Samantha Bothwell and Alex Soupir and Julia Wrobel and Oscar Ospina and Brooke Fridley},   year = {2023},   note = {R package version 0.0.0.9000}, }"},{"path":"/index.html","id":"mifsim","dir":"","previous_headings":"","what":"Simulation of Multiplex Immunofluorescence (mIF) Data","title":"Simulation of Multiplex Immunofluorescence (mIF) Data","text":"R package simulate multiplex immunofluorescence (mIF) data benchmark spatial statistical methods","code":""},{"path":"/index.html","id":"installing-mifsim-to-rstudio","dir":"","previous_headings":"","what":"Installing mIFsim to RStudio","title":"Simulation of Multiplex Immunofluorescence (mIF) Data","text":"install mIFsim, required devtools remotes installed install_github() function:","code":"if (!require(\"devtools\", quietly = TRUE))   install.packages(\"devtools\")  devtools::install_github(\"FridleyLab/mIFsim\")"},{"path":"/reference/CreateSimulationObject.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a spatial simulation object. — CreateSimulationObject","title":"Create a spatial simulation object. — CreateSimulationObject","text":"function creates Spatial Simulation Object spatial simulations. object contains information simulation window, number simulations perform, lists cells, tumor/stroma, holes, spatial files.","code":""},{"path":"/reference/CreateSimulationObject.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a spatial simulation object. — CreateSimulationObject","text":"","code":"CreateSimulationObject(window = NULL, sims = NULL, cell_types = 1)"},{"path":"/reference/CreateSimulationObject.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a spatial simulation object. — CreateSimulationObject","text":"window object class owin representing simulation window. NULL, defaults rectangular window size (0,10) x y directions. sims number simulations perform. NULL l ess 1, defaults 3. cell_types number cell types. Defaults 1.","code":""},{"path":"/reference/CreateSimulationObject.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a spatial simulation object. — CreateSimulationObject","text":"Spatial Simulation Object containing simulation window, number simulations perform, lists cells, tumor/stroma, holes, spatial files.","code":""},{"path":"/reference/CreateSimulationObject.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a spatial simulation object. — CreateSimulationObject","text":"simulation window represented object class owin, specifies extent shape spatial domain simulations performed. window provided, function creates rectangular window size (0,10) x y directions. sims argument specifies number simulations perform. set NULL less 1, function defaults 3. cell_types argument specifies number cell types include simulation. default, function creates single cell type, represented object class Cell. Spatial Simulation Object composed following classes: Window object class owin. integer Sims specifying number simulations perform. list Cells class Cell. Tissue object class Tumor/Stroma, representing tumor stroma components simulation. Holes object class Holes, representing holes simulation. list Spatial Files containing spatial data associated simulation.","code":""},{"path":"/reference/CreateSimulationObject.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a spatial simulation object. — CreateSimulationObject","text":"","code":"CreateSimulationObject() #> Loading required package: spatstat #> Loading required package: spatstat.data #> Loading required package: spatstat.geom #> spatstat.geom 3.2-1 #> Loading required package: spatstat.random #> spatstat.random 3.1-5 #> Loading required package: spatstat.explore #> Loading required package: nlme #> spatstat.explore 3.2-1 #> Loading required package: spatstat.model #> Loading required package: rpart #> spatstat.model 3.2-4 #> Loading required package: spatstat.linnet #> spatstat.linnet 3.1-1 #>  #> spatstat 3.0-6  #> For an introduction to spatstat, type ‘beginner’  #> No `window` specified - defaulting to x (0, 10); y (0, 10) #> An object of class \"Spatial Simulation Object\" #> Slot \"Window\": #> window: rectangle = [0, 10] x [0, 10] units #>  #> Slot \"Sims\": #> [1] 3 #>  #> Slot \"Processes\": #> list() #>  #> Slot \"Tissue\": #> An object of class \"Tumor/Stroma\" #> Slot \"Parameters\": #> $k #> [1] 10 #>  #> $xmin #> [1] 0 #>  #> $xmax #> [1] 10 #>  #> $ymin #> [1] 0 #>  #> $ymax #> [1] 10 #>  #> $sdmin #> [1] 0.5 #>  #> $sdmax #> [1] 2 #>  #>  #> Slot \"Simulationed Kernels\": #> list() #>  #> Slot \"Density Grids\": #> list() #>  #>  #> Slot \"Holes\": #> An object of class \"Holes\" #> Slot \"Parameters\": #> $xmin #> [1] 0 #>  #> $xmax #> [1] 10 #>  #> $ymin #> [1] 0 #>  #> $ymax #> [1] 10 #>  #> $sdmin #> [1] 0.5 #>  #> $sdmax #> [1] 2 #>  #> $hole_prob #> [1] 0.20 0.35 #>  #>  #> Slot \"Simulationed Kernels\": #> list() #>  #> Slot \"Density Grids\": #> list() #>  #>  #> Slot \"Cells\": #> [[1]] #> An object of class \"Cell\" #> Slot \"Parameters\": #> $k #> [1] 10 #>  #> $xmin #> [1] 0 #>  #> $xmax #> [1] 10 #>  #> $ymin #> [1] 0 #>  #> $ymax #> [1] 10 #>  #> $sdmin #> [1] 0.5 #>  #> $sdmax #> [1] 2 #>  #> $probs #> [1] 0 1 #>  #>  #> Slot \"Simulationed Kernels\": #> list() #>  #> Slot \"Density Grids\": #> list() #>  #>  #>  #> Slot \"Spatial Files\": #> list() #>"},{"path":"/reference/CreateSpatialList.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Spatial Files from a Spatial Simulation Object — CreateSpatialList","title":"Get Spatial Files from a Spatial Simulation Object — CreateSpatialList","text":"function extracts 'Spatial Files' slot Spatial Simulation Object removes probability columns converting 'Positive' 'Negative' cell assignment columns 1 0, respectively.","code":""},{"path":"/reference/CreateSpatialList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Spatial Files from a Spatial Simulation Object — CreateSpatialList","text":"","code":"CreateSpatialList(sim_object)"},{"path":"/reference/CreateSpatialList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Spatial Files from a Spatial Simulation Object — CreateSpatialList","text":"sim_object Spatial Simulation Object","code":""},{"path":"/reference/CreateSpatialList.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Spatial Files from a Spatial Simulation Object — CreateSpatialList","text":"list data frames, one simulated cell type, cleaned columns","code":""},{"path":"/reference/CreateSpatialList.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Spatial Files from a Spatial Simulation Object — CreateSpatialList","text":"output function creates list spatial files formatted way allow direct import mIF object package 'spatialTIME'","code":""},{"path":"/reference/GenerateCellPositivity.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Cell Positivity — GenerateCellPositivity","title":"Generate Cell Positivity — GenerateCellPositivity","text":"Generate probability cell positive given set simulation parameters file spatial simulation object.","code":""},{"path":"/reference/GenerateCellPositivity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Cell Positivity — GenerateCellPositivity","text":"","code":"GenerateCellPositivity(   sim_object,   k = NA,   xmin = NA,   xmax = NA,   ymin = NA,   ymax = NA,   sdmin = 1/2,   sdmax = 2,   probs = c(0, 1),   Force = FALSE,   density_heatmap = FALSE,   step_size = 1,   cores = 1,   correlation = 0 )"},{"path":"/reference/GenerateCellPositivity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Cell Positivity — GenerateCellPositivity","text":"sim_object mIFSim object containing simulated data. k integer specifying number clusters simulated process. xmin numeric value specifying minimum x value kernel. xmax numeric value specifying maximum x value kernel. ymin numeric value specifying minimum y value kernel. ymax numeric value specifying maximum y value kernel. sdmin numeric value specifying minimum standard deviation kernel. sdmax numeric value specifying maximum standard deviation kernel. probs numeric vector length 2 specifying minimum maximum probability values scaling kernel values. Force logical value indicating whether force simulation parameters within simulation window limits. density_heatmap logical value indicating whether compute density heatmap cell. step_size numeric value specifying step size grid points within window. cores integer value specifying number cores use parallel computation. correlation value -1 1 related second cell type first","code":""},{"path":"/reference/GenerateCellPositivity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Cell Positivity — GenerateCellPositivity","text":"Returns original mIFSim object additional generated data added cell object.","code":""},{"path":"/reference/GenerateCellPositivity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Cell Positivity — GenerateCellPositivity","text":"function generates probability cell positive given set simulation parameters f file mIFSim object. creates kernel parameter list k clusters simulated process computes probability point grid points within window cell. function also computes density heatmap cell density_heatmap set TRUE.","code":""},{"path":"/reference/GenerateHoles.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate holes in a spatial simulation object — GenerateHoles","title":"Generate holes in a spatial simulation object — GenerateHoles","text":"function generates holes (regions low probability) spatial simulation object based user-defined parameters. function uses kernel density estimate simulate holes, returns modified version input object holes added. function also options compute density heatmap assign points within holes dropped kept based scaled probability value.","code":""},{"path":"/reference/GenerateHoles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate holes in a spatial simulation object — GenerateHoles","text":"","code":"GenerateHoles(   sim_object,   xmin = NA,   xmax = NA,   ymin = NA,   ymax = NA,   sdmin = 1/2,   sdmax = 2,   hole_prob = c(0.2, 0.35),   force = FALSE,   density_heatmap = FALSE,   step_size = 1,   cores = 1 )"},{"path":"/reference/GenerateHoles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate holes in a spatial simulation object — GenerateHoles","text":"sim_object spatial simulation object class 'Spatial Simulation Object' xmin Minimum x-coordinate holes (default: NA) xmax Maximum x-coordinate holes (default: NA) ymin Minimum y-coordinate holes (default: NA) ymax Maximum y-coordinate holes (default: NA) sdmin Minimum standard deviation kernels (default: 1/2) sdmax Maximum standard deviation kernels (default: 2) hole_prob vector length 2 minimum maximum probabilities point within hole (default: c(0.2, 0.35)) force Logical; TRUE, forces function simulate outside window boundaries (default: FALSE) density_heatmap Logical; TRUE, computes density heatmap (default: FALSE) step_size step size grid (default: 1) cores number cores use parallel processing (default: 1)","code":""},{"path":"/reference/GenerateHoles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate holes in a spatial simulation object — GenerateHoles","text":"modified spatial simulation object holes added","code":""},{"path":"/reference/GenerateHoles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate holes in a spatial simulation object — GenerateHoles","text":"function first checks input object correct class, parameters NULL. parameters NULL, function stops error message. x- y-ranges holes extend beyond boundaries simulation window, function also stops error message, unless force parameter set TRUE. function produces kernel parameter lists simulated process, generates grid based user-defined step size. density_heatmap set TRUE, function computes density heatmap using CalculateGrid function. Finally, function computes hole probabilities simulated process, assigns point dropped kept based scaled probability value, returns modified simulation object.","code":""},{"path":"/reference/GenerateHoles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate holes in a spatial simulation object — GenerateHoles","text":"","code":"sim_object <- CreateSimulationObject() #> No `window` specified - defaulting to x (0, 10); y (0, 10)  # Generate holes in the simulation object sim_object <- GenerateHoles(sim_object, hole_prob = c(0.1, 0.3), force = TRUE) #> Error: object 'sim_object' not found"},{"path":"/reference/GenerateSpatialProcess.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Spatial Point Process — GenerateSpatialProcess","title":"Generate Spatial Point Process — GenerateSpatialProcess","text":"Generate spatial point process within simulation object's window using Poisson point process.","code":""},{"path":"/reference/GenerateSpatialProcess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Spatial Point Process — GenerateSpatialProcess","text":"","code":"GenerateSpatialProcess(sim_object, lambda = 25, ...)"},{"path":"/reference/GenerateSpatialProcess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Spatial Point Process — GenerateSpatialProcess","text":"sim_object 'Spatial Simulation Object' containing window. lambda intensity point process. Default 25. ... Additional arguments passed 'rpoispp'.","code":""},{"path":"/reference/GenerateSpatialProcess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Spatial Point Process — GenerateSpatialProcess","text":"updated 'sim_object' simulated point process added 'Processes' slot.","code":""},{"path":"/reference/GenerateSpatialProcess.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Spatial Point Process — GenerateSpatialProcess","text":"function generates spatial point process within window 'sim_object' using Poisson point process intensity 'lambda'. simulated point process added 'Processes' slot 'sim_object'. Additional arguments can passed 'rpoispp' function.","code":""},{"path":"/reference/GenerateSpatialProcess.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Spatial Point Process — GenerateSpatialProcess","text":"","code":"sim_object <- CreateSimulationObject() #> No `window` specified - defaulting to x (0, 10); y (0, 10) sim_object <- GenerateSpatialProcess(sim_object, lambda = 30)"},{"path":"/reference/GenerateTissue.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Tissue — GenerateTissue","title":"Generate Tissue — GenerateTissue","text":"function generates simulated tissue using specified number clusters spatial parameters process simulation object. tissue represented grid points probabilities belonging stromal tumor tissue, based Gaussian kernel density estimate calculated process.","code":""},{"path":"/reference/GenerateTissue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Tissue — GenerateTissue","text":"","code":"GenerateTissue(   sim_object,   k = NA,   xmin = NA,   xmax = NA,   ymin = NA,   ymax = NA,   sdmin = 1/2,   sdmax = 2,   force = FALSE,   density_heatmap = FALSE,   step_size = 1,   cores = 1 )"},{"path":"/reference/GenerateTissue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Tissue — GenerateTissue","text":"sim_object 'Spatial Simulation Object' created CreateSpatialSimulationObject. k Number clusters generate process. xmin Minimum x-coordinate cluster centers. xmax Maximum x-coordinate cluster centers. ymin Minimum y-coordinate cluster centers. ymax Maximum y-coordinate cluster centers. sdmin Minimum standard deviation cluster kernels. sdmax Maximum standard deviation cluster kernels. force Logical, whether force generation tissue even generated cluster centers fall outside simulation window. FALSE, error thrown cluster centers outside window. density_heatmap Logical, whether calculate density heatmap simulated tissue. TRUE, grid points generated covering entire simulation window, probability grid point belonging stroma calculated based generated tissue probability. step_size Grid step size density heatmap. cores Number cores use parallel processing density calculations.","code":""},{"path":"/reference/GenerateTissue.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Tissue — GenerateTissue","text":"modified 'Spatial Simulation Object' updated tissue grids assigned tissue types simulated process.","code":""},{"path":"/reference/GenerateTissue.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Tissue — GenerateTissue","text":"function generates simulated tissue process simulation object first generating k clusters within specified x y ranges standard deviation within specified range. , Gaussian kernel density estimate calculated process using generated clusters center points specified standard deviation kernel size. density estimates represent probability point simulation window belonging tumor stromal tissue. density_heatmap = TRUE, density heatmap calculated using grid points covering entire simulation window. Finally, simulated point, probability belonging stroma tissue calculated based kernel density estimate, tissue type assigned either \"Tumor\" \"Stroma\" using random sample probability proportional probability belonging stroma tissue.","code":""},{"path":"/reference/GenerateTissue.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Tissue — GenerateTissue","text":"","code":"# Create a simulation object with a window and point process sim_object <- CreateSpatialSimulationObject() #> Error in CreateSpatialSimulationObject(): could not find function \"CreateSpatialSimulationObject\" sim_object <- GenerateSpatialProcess(sim_object, lambda = 20) #> Error in eval(expr, envir, enclos): object 'sim_object' not found  # Generate tissue with default parameters sim_object <- GenerateTissue(sim_object) #> Error in eval(expr, envir, enclos): object 'sim_object' not found  # Generate tissue with custom parameters and density heatmap sim_object <- GenerateTissue(sim_object, k = 3, xmin = 0.2, xmax = 0.8,                              ymin = 0.2, ymax = 0.8, density_heatmap = TRUE) #> Error in eval(expr, envir, enclos): object 'sim_object' not found"},{"path":"/reference/PlotSimulation.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Simulation — PlotSimulation","title":"Plot Simulation — PlotSimulation","text":"Plot different aspects Spatial Simulation Object","code":""},{"path":"/reference/PlotSimulation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Simulation — PlotSimulation","text":"","code":"PlotSimulation(   sim_object,   nrow = 1,   ncol = 1,   which = 1,   what = \"tissue heatmap\" )"},{"path":"/reference/PlotSimulation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Simulation — PlotSimulation","text":"sim_object Spatial Simulation Object nrow Number rows plots (applicable one plot made) ncol Number columns plots (applicable one plot made) Index elements Spatial Simulation Object plotted plot (\"tissue heatmap\", \"hole heatmap\", \"whole core\")","code":""},{"path":"/reference/PlotSimulation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Simulation — PlotSimulation","text":"plot grid plots, depending input arguments","code":""},{"path":"/reference/PlotSimulation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Simulation — PlotSimulation","text":"PlotSimulation function used plot different aspects Spatial Simulation Object. function takes sim_object first argument, object class \"Spatial Simulation Object\". function can used plot different aspects simulation, heatmaps tissue holes, plot whole core assigned cells colored type. set \"tissue heatmap\" \"hole heatmap\", function plot heatmaps specified tissue hole. set \"whole core\", function plot entire core assigned cells colored type. single element sim_object can plotted set \"whole core\". one plot made, nrow ncol can used specify number rows columns plot grid, respectively.","code":""},{"path":"/reference/PlotSimulation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Simulation — PlotSimulation","text":"","code":"# create a Spatial Simulation Object sim_object <- CreateSimulationObject() #> No `window` specified - defaulting to x (0, 10); y (0, 10) sim_object = GenerateSpatialProcess(sim_object) sim_object = GenerateTissue(sim_object, density_heatmap = T, step_size = 1, cores = 1) #> Error: object 'sim_object' not found # plot a heatmap of tissue 1 PlotSimulation(sim_object, which = 1, what = \"tissue heatmap\") #> Loading required package: ggplot2 #> Error in sim_object@Tissue@`Density Grids`[[which]]: subscript out of bounds"},{"path":"/reference/SummariseSpatial.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise Spatial — SummariseSpatial","title":"Summarise Spatial — SummariseSpatial","text":"Summarise Spatial","code":""},{"path":"/reference/SummariseSpatial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise Spatial — SummariseSpatial","text":"","code":"SummariseSpatial(spatial_list, markers)"},{"path":"/reference/SummariseSpatial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise Spatial — SummariseSpatial","text":"spatial_list list spatial data frames markers column names markers names columns, probably cell types, contain 1s 0s representing positive/negative assignments","code":""},{"path":"/reference/SummariseSpatial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise Spatial — SummariseSpatial","text":"data frome summary counts proportions markers spatial data frame","code":""},{"path":"/reference/UpdateSimulationWindow.html","id":null,"dir":"Reference","previous_headings":"","what":"Update the simulation window in a Spatial Simulation Object — UpdateSimulationWindow","title":"Update the simulation window in a Spatial Simulation Object — UpdateSimulationWindow","text":"function updates simulation window Spatial Simulation Object replacing existing window new one.","code":""},{"path":"/reference/UpdateSimulationWindow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update the simulation window in a Spatial Simulation Object — UpdateSimulationWindow","text":"","code":"UpdateSimulationWindow(sim_object, window = NULL)"},{"path":"/reference/UpdateSimulationWindow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update the simulation window in a Spatial Simulation Object — UpdateSimulationWindow","text":"sim_object Spatial Simulation Object object window new owin object representing updated simulation window","code":""},{"path":"/reference/UpdateSimulationWindow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update the simulation window in a Spatial Simulation Object — UpdateSimulationWindow","text":"updated Spatial Simulation Object object","code":""},{"path":"/reference/UpdateSimulationWindow.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Update the simulation window in a Spatial Simulation Object — UpdateSimulationWindow","text":"UpdateSimulationWindow() function checks input sim_object class 'Spatial Simulation Object', input window null class 'owin'. checks pass, function updates simulation window input sim_object returns updated Spatial Simulation Object object.","code":""},{"path":[]},{"path":"/reference/UpdateSimulationWindow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update the simulation window in a Spatial Simulation Object — UpdateSimulationWindow","text":"","code":"# Create a simulation object sim_obj <- create_simObject() #> Error in create_simObject(): could not find function \"create_simObject\"  # Update the simulation window new_window <- owin(c(0, 5), c(0, 5)) updated_sim_obj <- UpdateSimulationWindow(sim_obj, window = new_window) #> Error in eval(expr, envir, enclos): object 'sim_obj' not found"},{"path":"/reference/hello.html","id":null,"dir":"Reference","previous_headings":"","what":"Hello, World! — hello","title":"Hello, World! — hello","text":"Prints 'Hello, world!'.","code":""},{"path":"/reference/hello.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hello, World! — hello","text":"","code":"hello()"},{"path":"/reference/hello.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hello, World! — hello","text":"","code":"hello() #> Error in hello(): could not find function \"hello\""},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::[\\%>\\%][magrittr::pipe] details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"/reference/wm.html","id":null,"dir":"Reference","previous_headings":"","what":"Round spatstat window — wm","title":"Round spatstat window — wm","text":"window spatstat similar tissue microarray image scans","code":""},{"path":"/reference/wm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Round spatstat window — wm","text":"","code":"wm"},{"path":"/reference/wm.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Round spatstat window — wm","text":"owin object many slots describing size mask type mask","code":""}]
