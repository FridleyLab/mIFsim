[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 mIFsim authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":[]},{"path":"/articles/a01_Introduction.html","id":"spatial-point-patterns","dir":"Articles","previous_headings":"Background","what":"Spatial Point Patterns","title":"Introduction","text":"Spatial point patterns realization spatial point process models. points represent feature, case cells ecological studies can trees plants, space. space 2-dimensional x y axis arbitrary units. point spatial point pattern can marks - characteristics describe information point. marks can things like whether ’s positive negative specific phenotype tissue, perhaps size cell, even intensity fluorophore cells surface. spatial point pattern can provide us great deal information pathology looking cell spatial contexture. order understand cell contexture pathology, researchers can employ different spatial statistic methods describe feature spatial point pattern. simple descriptive statistic spatial point pattern lambda describes intensity. large lambda means large number points given boundary, small lambda means boundary area less points. Another summary statistic Ripley’s K(r) describes many points interest within r anchor cell. measurement can compared different things like complete spatial randomness (CSR) measurement estimate far observed cell contexture deviates random cell locations sample. addition Ripley’s K(r), several methods nearest neighbor G(r) function interaction variable developed Steinhart et. al.","code":""},{"path":"/articles/a01_Introduction.html","id":"simulating","dir":"Articles","previous_headings":"Background","what":"Simulating","title":"Introduction","text":"order compare metrics describing point patterns, developed simulation package: mIFsim. main basis package using Gaussian kernels assign different characteristics underlying spatial point pattern. Gaussian kernel described 3 different ways package: kernel’s center, standard deviation x-direction standard deviation y-direction. k kernel means centers point pattern descriptors. kernels spatial point pattern described locations points, kernels can used give probability points - closer center k greater probability kernel describing farther away k center lower probability. probabilities range 0 1 assumes kernel centers ‘hot’ tissue/cell phenotype/hole, reality always case. Due inherent noise see tissues cell level, provided ability limit kernel center probability increase background probability. addition making simulations realistic, also allows abundance control cell phenotypes (lower max probability lower abundance).","code":""},{"path":"/articles/a01_Introduction.html","id":"using-mifsim","dir":"Articles","previous_headings":"","what":"Using mIFsim","title":"Introduction","text":"process simulating multiplex immunofluorescence data streamlined similar way one thinks thinking real data. First, S4 SpatSimObj object initialized slots needed proceed whole simulation process. Slots inside kernels describe tissue, holes, cell phenotypes, simulation window, tabular format . SpatialSimulationObject() ready, point patterns can simulated (point patterns act ‘master’ next parts). point pattern similar extracellular matrix just places cells go identity cells. Thinking broadly, need create tissue regions images designated either tissue 1 tissue 2 (can interpreted tumor stroma). Separately, cell phenotypes can assigned cell. done separate kernels step allows high customization fine tuning simulated samples spatial contexture. parameters changed initialized values, stored object future can referred . Spatial statistics usually interested amount clustering points single mark type . example, shown high abundance low clustering cytotoxic T cells associated better overall survival missing cytotoxic T cells high grade serous ovarian cancer tumors. also instances colocalization 2 difference cell types might interest T cell B cells tumors. mIFsim, provide methods perform spatial point patterns. Input parameters dictate layout first cell type. case one cell type wanted, correlation value taken uses kernel first cell type (correlation = 1) strong colocalization inverts first cell types kernel (correlation = -1) segregation.","code":""},{"path":"/articles/a01_Introduction.html","id":"univariate-simulation","dir":"Articles","previous_headings":"Using mIFsim","what":"Univariate Simulation","title":"Introduction","text":"order get started simulating multiplex immunofluorescence (mIF) samples, need import package. create simulation object, can call CreateSimulationObject(), takes 3 arguments initialize object downstream functions: window - spatstat owin object boundary simulate points. window acts mask functions know simulate points later . sims - integer value number samples wanting simulated cell_types - number different phenotypes simulate, going single cell type window isn’t specified built 10x10 unit window used. make custom window, use spatstat.geom::owin Let’s create simulation object. simulation object attribute gradually filled progress. Using summary() method, can see simulation object inside need next. , 9 simulations default window wanting perform single cell type. method really useful fine tuning parameters get desired output shows exactly already done loading base object RDS file. simulation object parameters set within, need create point pattern. GenerateSpatialPattern() function takes spatial simulation object lambda, intensity point pattern. NOTE: large windows large lambdas, size spatial simulation object can grow fast mindful. parameters passed spatstat.random::rpoispp can passed GenerateSpatialPattern() end. , can check filling slots summary() even see new process looks like plot().  Next generate regions different tissue. purpose , tissue 1 tumor tissue 2 stroma. parameters initialized building spatial simulation tells downstream functions simulate things Gaussian kernel - GenerateTissue() one . nothing supplied function calling, default values. Alternatively, can specify function call. include regions within window like tissue regions simulated, number regions, standard deviation range probability falls around region centers, etc. Something whether ending kernel converted heatmap resolution. NOTE: smaller step_size used heatmap longer takes run mindful. simulating tissues can look summary spatial simulation object see newly filled slot. tissue kernel slot now filled number kernels matching number spatial processes . Let’s take look simulated tissue kernels PlotSimulation(). using negative ranges window, function use overlap default GenerateTissue() range window. See documentation GenerateTissue() details.  kernels randomly laid simulation region random sizes within constraints parameters provided. number tissue regions simulated fixed input k value, sampled distribution centered k. larger sdmin sdmax increase sizes tissue regions. See GenerateTissue() information Generating holes can help assess need correcting metrics derived spatial statistics. example, pond center field, crops able planted yet measuring amount field just outside border say lots crops able fit. Sometimes, things need adjusted tissue sections stained second folds tears, leaving large area longer cells present. Even using holes assessing metrics, performing just create new column spatial files can later ignored. holes needed , can skipped. parameters go GenerateHoles() similar GenerateTissue() one addition: hole_prob proportion range point patterns become holes. parameters defaults set spatial simulation object created, can overridden particular area process wanted holes rest. number holes random long sum area within proportions . Let’s see kernels holes look. center holes highest probability removed Bernoulli distribution ‘hole’ ‘hole’.   Next thing us simulate positivity cells phenotype using GenerateCellPositivity(). Just like holes tissue, boundaries simulated positive cells fall stored parameters. helpful going back seeing done. However , 2 different parameters help set abundance (probs) , case multiple cell types, related cell types (correlation). probs parameter used scale probabilities cell type first number away kernel peaks second maximum probability cell. higher abundance, maximum probability can set higher even increase minimum probability. issue point patterns multiple cell types entirely informed one another assigning cell types. B cells T cells distinct phenotypes therefore one cell shouldn’t positive . , use probability Bernoulli distribution ’s chance single cell positive 2 cell types, even max probability 0.1. univariate clustering, smaller standard deviations higher probability range increase amount clustering. Large standard deviations low probabilities make clustering metrics low. univariate cell simulation, correlation metric nothing. similarity 2 cell types controlled correlation value. correlation = 1 use kernel used probabilities Cell Type 1 cell types, correlation = -1 invert Cell Type 1 kernel cells segregated (noise). plot simulation object now specifying want see whole core, can see cells. little pockets positive cells also noise.","code":"library(mIFsim) #> mIFsim Version: #> 0.0.0.9000 #>             _____ ______   _ #>            |_   _|  ____| (_) #>   _ __ ___   | | | |__ ___ _ _ __ ___ #>  | '_ ` _ \\  | | |  __/ __| | '_ ` _ \\ #>  | | | | | |_| |_| |  \\__ \\ | | | | | | #>  |_| |_| |_|_____|_|  |___/_|_| |_| |_| #>  Fridley Lab Enjoy set.seed(333) #reproducibility custom_window = spatstat.geom::owin(xrange = c(0, 10), yrange = c(0, 10)) sim_object = CreateSimulationObject(sims = 9, cell_types = 1, window = custom_window) summary(sim_object) #> Spatial Simulation object for 9 simulated images. Currently, there are: #>  Window: x (0,10); y (0,10) #>  0 spatial point patterns #>  0 tissue kernels #>  0 hole kernels #>  0 cell kernels for 1 cell types sim_object = GenerateSpatialPattern(sim_object) summary(sim_object) #> Spatial Simulation object for 9 simulated images. Currently, there are: #>  Window: x (0,10); y (0,10) #>  9 spatial point patterns #>  0 tissue kernels #>  0 hole kernels #>  0 cell kernels for 1 cell types plot(sim_object, what = \"Patterns\", ncol = 1, nrow = 1, which = 1)#print only first point pattern sim_object = GenerateTissue(sim_object, density_heatmap = T, step_size = 0.1, cores = 1) #> Computing density heatmap #> Computing tissue probability summary(sim_object) #> Spatial Simulation object for 9 simulated images. Currently, there are: #>  Window: x (0,10); y (0,10) #>  9 spatial point patterns #>  9 tissue kernels #>  0 hole kernels #>  0 cell kernels for 1 cell types PlotSimulation(sim_object, which = 1:4, ncol = 2, nrow = 2, what = \"tissue heatmap\") sim_object = GenerateHoles(sim_object, density_heatmap = T, step_size = 0.1, cores = 1) #> Computing density heatmap #> Computing hole probability summary(sim_object) #> Spatial Simulation object for 9 simulated images. Currently, there are: #>  Window: x (0,10); y (0,10) #>  9 spatial point patterns #>  9 tissue kernels #>  9 hole kernels #>  0 cell kernels for 1 cell types PlotSimulation(sim_object, which = 1:8, ncol = 2, nrow = 2, what = \"hole heatmap\") #> $`1` #>  #> $`2` #>  #> attr(,\"class\") #> [1] \"list\"      \"ggarrange\" sim_object = GenerateCellPositivity(sim_object, k = 4,                                     sdmin = 3, sdmax = 5,                                     density_heatmap = T, step_size = 0.1, cores = 1, probs = c(0.0, 0.1),                                     correlation = -1) #> Computing density heatmap for Cell 1 #> Computing probability for Cell 1 summary(sim_object) #> Spatial Simulation object for 9 simulated images. Currently, there are: #>  Window: x (0,10); y (0,10) #>  9 spatial point patterns #>  9 tissue kernels #>  9 hole kernels #>  9 cell kernels for 1 cell types PlotSimulation(sim_object, which = 1, what = \"whole core\")"},{"path":"/articles/a01_Introduction.html","id":"bivariate-simulation","dir":"Articles","previous_headings":"Using mIFsim","what":"Bivariate Simulation","title":"Introduction","text":"process 2 cell types essentially single cell type addition correlation value simulating cell types. Lets create another SpatSimObj get phenotype simulating step GenerateCellPositivity(). great feature mIFsim works nicely magrittr pipe function immediately pass output one function next. previously mentioned, can specify correlation values 1 use kernal cell types assign way identifable colocalized Cell Type 1 Cell Type 2. First, high correlation:  can see locations Cell Type 1 , Cell Type 2 also present. couple cells assigned positive Cell Type 1 Cell Type 2 taken consideration next steps. looking colocalization mutually exclusive cell types, removed. compare strong segregation Cell Type 1 Cell Type 2?  Tissue 2 ’s easiser see regions Cell Type 1 regions Cell Type 2.","code":"#set seed set.seed(333) #create the new object bivariate_sim = CreateSimulationObject(sims = 5, cell_types = 2) %>%   #produce the point pattern   GenerateSpatialPattern() %>%   #make tissues   GenerateTissue(density_heatmap = T, step_size = 0.1, cores = 1) #> No `window` specified - defaulting to x (0, 10); y (0, 10) #> Computing density heatmap #> Computing tissue probability bivariate_sim_tmp  = GenerateCellPositivity(bivariate_sim, k = 4,                                     sdmin = 3, sdmax = 5,                                     density_heatmap = T, step_size = 0.1, cores = 1, probs = c(0.0, 0.1),                                     correlation = 1) #> Computing density heatmap for Cell 1 #> Computing probability for Cell 1 #> Adjusting density heatmap for Cell 2 #> Computing probability for Cell 2  PlotSimulation(bivariate_sim_tmp, which = 1, what = \"whole core\") bivariate_sim_tmp  = GenerateCellPositivity(bivariate_sim, k = 4,                                     sdmin = 3, sdmax = 5,                                     density_heatmap = T, step_size = 0.1, cores = 1, probs = c(0.0, 0.1),                                     correlation = -1) #> Computing density heatmap for Cell 1 #> Computing probability for Cell 1 #> Adjusting density heatmap for Cell 2 #> Computing probability for Cell 2  PlotSimulation(bivariate_sim_tmp, which = 1, what = \"whole core\")"},{"path":"/articles/a01_Introduction.html","id":"exporting-data","dir":"Articles","previous_headings":"","what":"Exporting Data","title":"Introduction","text":"Lastly, data likely wanted tabular format. Since multiple simulated point patterns, function CreateSpatialList() returns list data frames containing cell x y locations, tissue cell belongs , whether cell falls hole, positivity different cell types. Alternatively, ability CreateSpatialList() export spatial pattern data single data frame using single_df set TRUE. adds Image Name column keeps spatial pattern data separate, can split back list later use SummariseSpatial(), creates core level counts different cell types. spatial list summary table can now used packages like spatialTIME compute spatial statistics simulated data frames.","code":"spatial_list = CreateSpatialList(sim_object = bivariate_sim_tmp) head(spatial_list[[1]]) #>           x        y Tissue Assignment Cell 1 Assignment Cell 2 Assignment #> 1 5.7130558 1.274980          Tissue 1                 0                 0 #> 2 0.2011937 2.748664          Tissue 2                 0                 0 #> 3 7.2355739 6.800332          Tissue 2                 0                 0 #> 4 6.0939363 6.601037          Tissue 2                 0                 0 #> 5 3.0671935 2.480361          Tissue 2                 0                 0 #> 6 0.6350984 1.242892          Tissue 1                 0                 0 single_dataframe = CreateSpatialList(sim_object = bivariate_sim_tmp, single_df = TRUE) head(single_dataframe) #>       Image Name         x        y Tissue Assignment Cell 1 Assignment #> 1 Spatial Data 1 5.7130558 1.274980          Tissue 1                 0 #> 2 Spatial Data 1 0.2011937 2.748664          Tissue 2                 0 #> 3 Spatial Data 1 7.2355739 6.800332          Tissue 2                 0 #> 4 Spatial Data 1 6.0939363 6.601037          Tissue 2                 0 #> 5 Spatial Data 1 3.0671935 2.480361          Tissue 2                 0 #> 6 Spatial Data 1 0.6350984 1.242892          Tissue 1                 0 #>   Cell 2 Assignment #> 1                 0 #> 2                 0 #> 3                 0 #> 4                 0 #> 5                 0 #> 6                 0 summary_data = SummariseSpatial(spatial_list = spatial_list, markers = c(\"Cell 1 Assignment\", \"Cell 2 Assignment\")) head(summary_data) #> # A tibble: 5 × 6 #>   `Sample Tag`   `Total Cells` `Cell 1 Assignment` `Cell 2 Assignment` #>   <chr>                  <int>               <dbl>               <dbl> #> 1 Spatial Data 1          2495                 141                 101 #> 2 Spatial Data 2          2450                 135                 105 #> 3 Spatial Data 3          2500                 134                 107 #> 4 Spatial Data 4          2514                 164                 100 #> 5 Spatial Data 5          2486                 116                 120 #> # ℹ 2 more variables: `% Cell 1 Assignment` <dbl>, `% Cell 2 Assignment` <dbl>"},{"path":[]},{"path":"/articles/a02_Univariate_Simulation.html","id":"section","dir":"Articles","previous_headings":"","what":"Simulating Univariate Cells","title":"Simulating Univariate Cells","text":"development novel clustering algorithms require ability create many samples controlled manner. Previously, used existing methods Ripley’s K classify multiple immunofluorescence (mIF) samples","code":""},{"path":"/articles/a02_Univariate_Simulation.html","id":"libraries","dir":"Articles","previous_headings":"","what":"Libraries","title":"Simulating Univariate Cells","text":"order get started simulating multiple immunofluorescence (mIF) samples, need import tha package.","code":"library(mIFsim) #> mIFsim Version: #> 0.0.0.9000 #>             _____ ______   _ #>            |_   _|  ____| (_) #>   _ __ ___   | | | |__ ___ _ _ __ ___ #>  | '_ ` _ \\  | | |  __/ __| | '_ ` _ \\ #>  | | | | | |_| |_| |  \\__ \\ | | | | | | #>  |_| |_| |_|_____|_|  |___/_|_| |_| |_| #>  Fridley Lab Enjoy set.seed(333) #reproducibility"},{"path":"/articles/a02_Univariate_Simulation.html","id":"running-mifsim","dir":"Articles","previous_headings":"","what":"Running mIFsim","title":"Simulating Univariate Cells","text":"create simulation object, can call create_simObject, takes 3 arguments initialize object downstream functions: window - spatstat window object boundary simulate points sims - integer value number samples wanting simulated cell_types - number different phenotypes simulate, going single cell type window isn’t specified built 10x10 used. Let’s create simulation object. simulation object attribute gradually filled progress. Using summary method, can see simulation object inside need next. , 9 simulations default window wanting perform single cell type. method really useful fine tuning parameters get desired output shows exactly already done loading base object RDS file. simulation object parameters set within, need create point pattern. GenerateSpatialPattern function takes spatial simulation object lambda, intensity point pattern. NOTE: large windows large lambdas, size spatial simulation object can grow fast mindful. parameters passed spatstat.random::rpoispp can passed GenerateSpatialPattern end. , can check filling slots summary even see new pattern looks like plot.  Next generate regions tumor stroma. parameters initialized building spatial simulation tells downstream functions simulate things Gaussian kernel - GenerateTissue one . nothing supplied function calling, default values. Alternatively, can specify function call. include regions within window like tissue regions simulated, number regions, standard deviation range probability falls around region centers, etc. Something whether ending kernel converted heatmap resolution. NOTE: smaller step_size used heatmap longer takes run mindful. simulating tissues can look summary spatial simulation object see newly filled slot. tissue kernel slot now filled number kernels matching number spatial patterns . Let’s take look simulated tissue kernels PlotSimulation.  kernels randomly laid simulation region random sizes within constraints parameters used. number tissue regions simulated fixed input k value, sampled distribution centered k. larger sdmin sdmax increase sizes tissue regions. Currently, next step required may future. Generating holes can help assess need correcting metrics derived spatial statistics. example, pond center field, crops able planted yet measuring amount field just outside border say lots crops able fit. Sometimes, things need adjusted . Even using holes assessing metrics, performing just create new column spatial files can later ignored. parameters go GenerateHoles similar GenerateTissue one addition: hole_prob proportion range point patterns become holes. parameters defaults set spatial simulation object created, can overridden particular area pattern wanted holes rest. number holes random long sum area within proportions . Let’s see kernels holes look. center holes highest probability removed Bernoulli distribution ‘hole’ ‘hole’.   Next thing us simulate positivity cells phenotype. Just like holes tissue, boundaries simulated positive cells fall stored parameters. helpful going back seeing done. However , 2 different parameters help set abundance (probs) , case multiple cell types, related cell types (correlation). probs parameter used scale probabilities cell type first number away kernel peaks second maximum probability cell. higher abundance, maximum probability can set higher even increase minimum probability. issue point patterns multiple cell types entirely informed one another assigning cell types. B cells T cells distinct phenotypes therefore one cell shouldn’t positive . , use probability Bernoulli distribution ’s chance single cell positive 2 cell types, even max probability 0.1. univariate clustering, smaller standard deviations higher probability range increase amount clustering. Large standard deviations low probabilities make clustering metrics low. univariate cell simulation, correlation metric nothing. plot simulation object now specifying want see whole core, can see cells. little pockets positive cells also noise.  Lastly, data likely wanted tabular format. Since multiple simulated point patterns, function CreateSpatialList returns list data frames containing cell x y locations, tissue cell belongs , whether cell falls hole, positivity different cell types. spatial list can now used packages like spatialTIME compute spatial statistics simulated data frames.","code":"sim_object = CreateSimulationObject(sims = 9, cell_types = 1) #> No `window` specified - defaulting to x (0, 10); y (0, 10) summary(sim_object) #> Spatial Simulation object for 9 simulated images. Currently, there are: #>  Window: x (0,10); y (0,10) #>  0 spatial point patterns #>  0 tissue kernels #>  0 hole kernels #>  0 cell kernels for 1 cell types sim_object = GenerateSpatialPattern(sim_object) summary(sim_object) #> Spatial Simulation object for 9 simulated images. Currently, there are: #>  Window: x (0,10); y (0,10) #>  9 spatial point patterns #>  0 tissue kernels #>  0 hole kernels #>  0 cell kernels for 1 cell types plot(sim_object) sim_object = GenerateTissue(sim_object, density_heatmap = T, step_size = 0.1, cores = 1) #> Computing density heatmap #> Computing tissue probability summary(sim_object) #> Spatial Simulation object for 9 simulated images. Currently, there are: #>  Window: x (0,10); y (0,10) #>  9 spatial point patterns #>  9 tissue kernels #>  0 hole kernels #>  0 cell kernels for 1 cell types PlotSimulation(sim_object, which = 1:4, ncol = 2, nrow = 2, what = \"tissue heatmap\") sim_object = GenerateHoles(sim_object, density_heatmap = T, step_size = 0.1, cores = 1) #> Computing density heatmap #> Computing hole probability summary(sim_object) #> Spatial Simulation object for 9 simulated images. Currently, there are: #>  Window: x (0,10); y (0,10) #>  9 spatial point patterns #>  9 tissue kernels #>  9 hole kernels #>  0 cell kernels for 1 cell types PlotSimulation(sim_object, which = 1:8, ncol = 2, nrow = 2, what = \"hole heatmap\") #> $`1` #>  #> $`2` #>  #> attr(,\"class\") #> [1] \"list\"      \"ggarrange\" sim_object = GenerateCellPositivity(sim_object, k = 4,                                     sdmin = 3, sdmax = 5,                                     density_heatmap = T, step_size = 0.1, cores = 1, probs = c(0.0, 0.1),                                     correlation = -1) #> Computing density heatmap for Cell 1 #> Computing probability for Cell 1 summary(sim_object) #> Spatial Simulation object for 9 simulated images. Currently, there are: #>  Window: x (0,10); y (0,10) #>  9 spatial point patterns #>  9 tissue kernels #>  9 hole kernels #>  9 cell kernels for 1 cell types PlotSimulation(sim_object, which = 1, what = \"whole core\") spatial_list = CreateSpatialList(sim_object = sim_object)"},{"path":"/articles/a03_Bivariate_Simulation.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"Simulating Bivariate Cells","text":"cases, 2 cell types wanted assess well different methods able pick colocalization segregation. mIFsim, implemented way perform simulated cell arrangements.","code":""},{"path":"/articles/a03_Bivariate_Simulation.html","id":"libraries","dir":"Articles","previous_headings":"","what":"Libraries","title":"Simulating Bivariate Cells","text":"order get started simulating bivariate multiple immunofluorescence (mIF) samples, need import package.","code":"library(mIFsim) #> mIFsim Version: #> 0.0.0.9000 #>             _____ ______   _ #>            |_   _|  ____| (_) #>   _ __ ___   | | | |__ ___ _ _ __ ___ #>  | '_ ` _ \\  | | |  __/ __| | '_ ` _ \\ #>  | | | | | |_| |_| |  \\__ \\ | | | | | | #>  |_| |_| |_|_____|_|  |___/_|_| |_| |_| #>  Fridley Lab Enjoy set.seed(333) #reproducibility"},{"path":"/articles/a03_Bivariate_Simulation.html","id":"running-mifsim","dir":"Articles","previous_headings":"","what":"Running mIFsim","title":"Simulating Bivariate Cells","text":"create simulation object, can call create_simObject, takes 3 arguments initialize object downstream functions: window - spatstat window object boundary simulate points sims - integer value number samples wanting simulated cell_types - number different phenotypes simulate, 2 CD3+ CD19+ window isn’t specified built 10x10 used. Let’s create simulation object. number simulations also defaulted 3 assessing colocalization methods, probably want use lot get confidence use 9. Using summary method, can see simulation object inside need next. , 9 simulations default window wanting perform 2 cell types. method really useful fine tuning parameters get desired output shows exactly already done loading base object RDS file. Now simulation object parameters set within, need create point pattern pattern. GenerateSpatialPattern function takes spatial simulation object lambda, intensity point pattern. NOTE: large windows large lambdas, size spatial simulation object can grow fast mindful. parameters passed spatstat.random::rpoispp can passed GenerateSpatialPattern end. , can check filling slots summary even see new pattern looks like plot.  Next generate regions tumor stroma. parameters initialized building spatial simulation tells downstream functions simulate things Gaussian kernel - GenerateTissue one . nothing supplied function calling, default values. Alternatively, can specify function call. include regions within window like tissue regions simulated, number regions, standard deviation range probability falls around region centers, etc. Something whether ending kernel converted heatmap resolution. NOTE: smaller step_size used heatmap longer takes run mindful. metrics changed, can recalled later know exactly used generate data. simulating tissues can look summary spatial simulation object see newly filled slot. tissue kernel slot now filled number kernels matching number spatial patterns . Let’s take look simulated tissue kernels PlotSimulation tissue heatmap.  kernels randomly laid simulation region random sizes within constraints parameters used. number tissue regions simulated fixed input k value, sampled distribution centered k. larger sdmin sdmax increase sizes tissue regions. Generating holes can help assess need correcting spatial statistic metrics derived. example, pond center field (hole), crops able planted yet measuring amount field just outside border (window) say lots crops able fit. Sometimes, things need adjusted . Even using holes assessing metrics, performing just create new column spatial files can later ignored. parameters go GenerateHoles similar GenerateTissue one addition: hole_prob proportion range point patterns become holes. parameters defaults set spatial simulation object created, can overridden particular area pattern wanted holes rest (x y min max ranges). number holes random long sum area within proportions . Let’s see kernels holes look. center holes highest probability removed Bernoulli distribution ‘hole’ ‘hole’. parameter now “hole heatmap”.  Next thing us simulate positivity cells phenotype. Just like holes tissue, boundaries simulated positive cells fall stored parameters. helpful going back seeing done. However , 2 different parameters help set abundance (probs) , case multiple cell types, related cell types (correlation). probs parameter used scale probabilities cell type first number away kernel peaks second maximum probability cell. higher abundance, maximum probability can set higher even increase minimum probability. issue point patterns multiple cell types entirely informed one another assigning cell types. B cells T cells distinct phenotypes therefore one cell shouldn’t positive . , use probability Bernoulli distribution ’s chance single cell positive 2 cell types, even max probability 0.1. Sometimes want study clustering dispersion different cell types. case, want make either alike (positive correlation) different (negative correlation). background take probability first cell simulated adjust according correlation parameter. kernels spatial simulation object cell types, time creating density heatmap assigning cell positive/negative, probabilities adjusted. Play around positive negative correlations see happens. multiple cells simulated, can see heatmap cell type 2 copied adjusted correltation much faster calculating density heatmap kernel. Lets look new cells distributed mIF correlation -1. means cell types segregated Cell 1 closer Cell 1 Cell 2 closer Cell 2. , cell probability positive always ‘noise’ trend .  Lastly, data likely wanted tabular format. Since multiple simulated point patterns, function CreateSpatialList returns list data frames containing cell x y locations, tissue cell belongs , whether cell falls hole, positivity different cell types. spatial list can now used packages like spatialTIME compute spatial statistics simulated data frames.","code":"sim_object = CreateSimulationObject(sims = 9, cell_types = 2) #> No `window` specified - defaulting to x (0, 10); y (0, 10) summary(sim_object) #> Spatial Simulation object for 9 simulated images. Currently, there are: #>  Window: x (0,10); y (0,10) #>  0 spatial point patterns #>  0 tissue kernels #>  0 hole kernels #>  0 cell kernels for 2 cell types sim_object = GenerateSpatialPattern(sim_object) summary(sim_object) #> Spatial Simulation object for 9 simulated images. Currently, there are: #>  Window: x (0,10); y (0,10) #>  9 spatial point patterns #>  0 tissue kernels #>  0 hole kernels #>  0 cell kernels for 2 cell types plot(sim_object) sim_object = GenerateTissue(sim_object, density_heatmap = T, step_size = 0.1, cores = 1) #> Computing density heatmap #> Computing tissue probability summary(sim_object) #> Spatial Simulation object for 9 simulated images. Currently, there are: #>  Window: x (0,10); y (0,10) #>  9 spatial point patterns #>  9 tissue kernels #>  0 hole kernels #>  0 cell kernels for 2 cell types PlotSimulation(sim_object, which = 1:4, ncol = 2, nrow = 2, what = \"tissue heatmap\") sim_object = GenerateHoles(sim_object, density_heatmap = T, step_size = 0.1, cores = 1) #> Computing density heatmap #> Computing hole probability summary(sim_object) #> Spatial Simulation object for 9 simulated images. Currently, there are: #>  Window: x (0,10); y (0,10) #>  9 spatial point patterns #>  9 tissue kernels #>  9 hole kernels #>  0 cell kernels for 2 cell types PlotSimulation(sim_object, which = 1:4, ncol = 2, nrow = 2, what = \"hole heatmap\") sim_object = GenerateCellPositivity(sim_object, k = 4,                                     sdmin = 3, sdmax = 5,                                     density_heatmap = T, step_size = 0.1, cores = 1, probs = c(0.0, 0.1),                                     correlation = -1) #> Computing density heatmap for Cell 1 #> Computing probability for Cell 1 #> Adjusting density heatmap for Cell 2 #> Computing probability for Cell 2 summary(sim_object) #> Spatial Simulation object for 9 simulated images. Currently, there are: #>  Window: x (0,10); y (0,10) #>  9 spatial point patterns #>  9 tissue kernels #>  9 hole kernels #>  9 cell kernels for 2 cell types PlotSimulation(sim_object, which = 1, what = \"whole core\") spatial_list = CreateSpatialList(sim_object = sim_object)"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Alex Soupir. Author. Christopher Wilson. Author. Julia Wrobel. Author. Oscar Ospina. Author. Brooke Fridley. Author. Fridley Lab. Maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Soupir , Wilson C, Wrobel J, Ospina O, Fridley B (2023). mIFsim: Simulation Multiplex Immunofluorescence (mIF) Data. R package version 0.0.0.9000, https://github.com/FridleyLab/mIFsim.","code":"@Manual{,   title = {mIFsim: Simulation of Multiplex Immunofluorescence (mIF) Data},   author = {Alex Soupir and Christopher Wilson and Julia Wrobel and Oscar Ospina and Brooke Fridley},   year = {2023},   note = {R package version 0.0.0.9000},   url = {https://github.com/FridleyLab/mIFsim}, }"},{"path":"/index.html","id":"mifsim","dir":"","previous_headings":"","what":"Simulation of Multiplex Immunofluorescence (mIF) Data","title":"Simulation of Multiplex Immunofluorescence (mIF) Data","text":"R package simulate multiplex immunofluorescence (mIF) data benchmark spatial statistical methods","code":""},{"path":"/index.html","id":"installing-mifsim-to-rstudio","dir":"","previous_headings":"","what":"Installing mIFsim to RStudio","title":"Simulation of Multiplex Immunofluorescence (mIF) Data","text":"install mIFsim, required devtools remotes installed install_github() function:","code":"if (!require(\"devtools\", quietly = TRUE))   install.packages(\"devtools\")  devtools::install_github(\"FridleyLab/mIFsim\")"},{"path":"/index.html","id":"vignettes","dir":"","previous_headings":"","what":"Vignettes","title":"Simulation of Multiplex Immunofluorescence (mIF) Data","text":"interested documentation tutorials, please visit: https://fridleylab.github.io/mIFsim/index.html","code":""},{"path":"/reference/CreateSimulationObject.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a spatial simulation object. — CreateSimulationObject","title":"Create a spatial simulation object. — CreateSimulationObject","text":"function creates SpatSimObj spatial simulations. object contains information simulation window, number simulations perform, lists cells, tumor/stroma, holes, spatial files.","code":""},{"path":"/reference/CreateSimulationObject.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a spatial simulation object. — CreateSimulationObject","text":"","code":"CreateSimulationObject(window = NULL, sims = NULL, cell_types = 1)"},{"path":"/reference/CreateSimulationObject.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a spatial simulation object. — CreateSimulationObject","text":"window object class owin representing simulation window. NULL, defaults rectangular window size (0,10) x y directions. sims number simulations perform. NULL l ess 1, defaults 3. cell_types number cell types. Defaults 1.","code":""},{"path":"/reference/CreateSimulationObject.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a spatial simulation object. — CreateSimulationObject","text":"SpatSimObj containing simulation window, number simulations perform, lists cells, tumor/stroma, holes, spatial files.","code":""},{"path":"/reference/CreateSimulationObject.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a spatial simulation object. — CreateSimulationObject","text":"simulation window represented object class owin, specifies extent shape spatial domain simulations performed. window provided, function creates rectangular window size (0,10) x y directions. sims argument specifies number simulations perform. set NULL less 1, function defaults 3. cell_types argument specifies number cell types include simulation. default, function creates single cell type, represented object class Cell. SpatSimObj composed following classes: Window object class owin. integer Sims specifying number simulations perform. list Cells class Cell. Tissue object class Tumor/Stroma, representing tumor stroma components simulation. Holes object class Holes, representing holes simulation. list Spatial Files containing spatial data associated simulation.","code":""},{"path":"/reference/CreateSimulationObject.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a spatial simulation object. — CreateSimulationObject","text":"","code":"CreateSimulationObject() #> No `window` specified - defaulting to x (0, 10); y (0, 10) #> Spatial Simulation object for 3 simulated images. Currently, there are: #> \tWindow: x (0,10); y (0,10) #> \t0 spatial point patterns #> \t0 tissue kernels #> \t0 hole kernels #> \t0 cell kernels for 1 cell types"},{"path":"/reference/CreateSpatialList.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Spatial Files from a SpatSimObj — CreateSpatialList","title":"Get Spatial Files from a SpatSimObj — CreateSpatialList","text":"function extracts 'Spatial Files' slot Spatial Simulation Object removes probability columns converting 'Positive' 'Negative' cell assignment columns 1 0, respectively.","code":""},{"path":"/reference/CreateSpatialList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Spatial Files from a SpatSimObj — CreateSpatialList","text":"","code":"CreateSpatialList(sim_object, single_df = FALSE)"},{"path":"/reference/CreateSpatialList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Spatial Files from a SpatSimObj — CreateSpatialList","text":"sim_object SpatSimObj single_df boolean whether collapse output list data frames single data frame . default FALSE","code":""},{"path":"/reference/CreateSpatialList.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Spatial Files from a SpatSimObj — CreateSpatialList","text":"list data frames, one simulated cell type, cleaned columns","code":""},{"path":"/reference/CreateSpatialList.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Spatial Files from a SpatSimObj — CreateSpatialList","text":"output function creates list spatial files formatted way allow direct import mIF object package 'spatialTIME'","code":""},{"path":"/reference/GenerateCellPositivity.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Cell Positivity — GenerateCellPositivity","title":"Generate Cell Positivity — GenerateCellPositivity","text":"Generate probability cell positive given set simulation parameters file SpatSimObj.","code":""},{"path":"/reference/GenerateCellPositivity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Cell Positivity — GenerateCellPositivity","text":"","code":"GenerateCellPositivity(   sim_object,   k = NA,   xmin = NA,   xmax = NA,   ymin = NA,   ymax = NA,   sdmin = 1/2,   sdmax = 2,   probs = c(0, 1),   Force = FALSE,   density_heatmap = FALSE,   step_size = 1,   cores = 1,   correlation = 0 )"},{"path":"/reference/GenerateCellPositivity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Cell Positivity — GenerateCellPositivity","text":"sim_object SpatSimObj object containing simulated data. k integer specifying number clusters simulated patterns xmin numeric value specifying minimum x value kernel. xmax numeric value specifying maximum x value kernel. ymin numeric value specifying minimum y value kernel. ymax numeric value specifying maximum y value kernel. sdmin numeric value specifying minimum standard deviation kernel. sdmax numeric value specifying maximum standard deviation kernel. probs numeric vector length 2 specifying minimum maximum probability values scaling kernel values. Force logical value indicating whether force simulation parameters within simulation window limits. density_heatmap logical value indicating whether compute density heatmap cell. step_size numeric value specifying step size grid points within window. cores integer value specifying number cores use parallel computation. correlation value -1 1 related second cell type first","code":""},{"path":"/reference/GenerateCellPositivity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Cell Positivity — GenerateCellPositivity","text":"Returns original mIFsim object additional generated data added cell object.","code":""},{"path":"/reference/GenerateCellPositivity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Cell Positivity — GenerateCellPositivity","text":"function generates probability cell positive given set simulation parameters f file mIFsim object. creates kernel parameter list k clusters simulated pattern computes probability point grid points within window cell. function also computes density heatmap cell density_heatmap set TRUE.","code":""},{"path":"/reference/GenerateHoles.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate holes in a spatial simulation object — GenerateHoles","title":"Generate holes in a spatial simulation object — GenerateHoles","text":"function generates holes (regions low probability) spatial simulation object based user-defined parameters. function uses kernel density estimate simulate holes, returns modified version input object holes added. function also options compute density heatmap assign points within holes dropped kept based scaled probability value.","code":""},{"path":"/reference/GenerateHoles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate holes in a spatial simulation object — GenerateHoles","text":"","code":"GenerateHoles(   sim_object,   xmin = NA,   xmax = NA,   ymin = NA,   ymax = NA,   sdmin = 1/2,   sdmax = 2,   hole_prob = c(0.2, 0.35),   force = FALSE,   density_heatmap = FALSE,   step_size = 1,   cores = 1 )"},{"path":"/reference/GenerateHoles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate holes in a spatial simulation object — GenerateHoles","text":"sim_object spatial simulation object class SpatSimObj xmin Minimum x-coordinate holes (default: NA) xmax Maximum x-coordinate holes (default: NA) ymin Minimum y-coordinate holes (default: NA) ymax Maximum y-coordinate holes (default: NA) sdmin Minimum standard deviation kernels (default: 1/2) sdmax Maximum standard deviation kernels (default: 2) hole_prob vector length 2 minimum maximum probabilities point within hole (default: c(0.2, 0.35)) force Logical; TRUE, forces function simulate outside window boundaries (default: FALSE) density_heatmap Logical; TRUE, computes density heatmap (default: FALSE) step_size step size grid (default: 1) cores number cores use parallel processing (default: 1)","code":""},{"path":"/reference/GenerateHoles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate holes in a spatial simulation object — GenerateHoles","text":"modified spatial simulation object holes added","code":""},{"path":"/reference/GenerateHoles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate holes in a spatial simulation object — GenerateHoles","text":"function first checks input object correct class, parameters NULL. parameters NULL, function stops error message. x- y-ranges holes extend beyond boundaries simulation window, function also stops error message, unless force parameter set TRUE. function produces kernel parameter lists simulated pattern, generates grid based user-defined step size. density_heatmap set TRUE, function computes density heatmap using CalculateGrid function. Finally, function computes hole probabilities simulated pattern, assigns point dropped kept based scaled probability value, returns modified simulation object.","code":""},{"path":"/reference/GenerateHoles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate holes in a spatial simulation object — GenerateHoles","text":"","code":"sim_object <- CreateSimulationObject() #> No `window` specified - defaulting to x (0, 10); y (0, 10)  #simulate points sim_object <- GenerateSpatialPattern(sim_object, lambda = 20)  # Generate tissue with default parameters sim_object <- GenerateTissue(sim_object) #> Computing tissue probability #>    |                                                              |   0%, ETA NA   |====================                                       |  33%, ETA 00:02   |=======================================                    |  67%, ETA 00:01   |=======================================================| 100%, Elapsed 00:02  # Generate holes in the simulation object sim_object <- GenerateHoles(sim_object, hole_prob = c(0.1, 0.3), force = TRUE) #> Computing hole probability #>    |                                                              |   0%, ETA NA   |====================                                       |  33%, ETA 00:01   |=======================================                    |  67%, ETA 00:00   |=======================================================| 100%, Elapsed 00:01"},{"path":"/reference/GenerateSpatialPattern.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Spatial Point Pattern — GenerateSpatialPattern","title":"Generate Spatial Point Pattern — GenerateSpatialPattern","text":"Generate spatial point pattern within simulation object's window using Poisson point process.","code":""},{"path":"/reference/GenerateSpatialPattern.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Spatial Point Pattern — GenerateSpatialPattern","text":"","code":"GenerateSpatialPattern(sim_object, lambda = 25, ...)"},{"path":"/reference/GenerateSpatialPattern.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Spatial Point Pattern — GenerateSpatialPattern","text":"sim_object 'SpatSimObj' containing window. lambda intensity point pattern Default 25. ... Additional arguments passed 'rpoispp'.","code":""},{"path":"/reference/GenerateSpatialPattern.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Spatial Point Pattern — GenerateSpatialPattern","text":"updated 'sim_object' simulated point process added 'Processes' slot.","code":""},{"path":"/reference/GenerateSpatialPattern.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Spatial Point Pattern — GenerateSpatialPattern","text":"function generates spatial point process within window 'sim_object' using Poisson point pattern intensity 'lambda'. simulated point pattern added 'Patterns' slot 'sim_object'. Additional arguments can passed 'rpoispp' function.","code":""},{"path":"/reference/GenerateSpatialPattern.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Spatial Point Pattern — GenerateSpatialPattern","text":"","code":"sim_object <- CreateSimulationObject() #> No `window` specified - defaulting to x (0, 10); y (0, 10) sim_object <- GenerateSpatialPattern(sim_object, lambda = 30)"},{"path":"/reference/GenerateTissue.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Tissue — GenerateTissue","title":"Generate Tissue — GenerateTissue","text":"function generates simulated tissue using specified number clusters spatial parameters pattern simulation object. tissue represented grid points probabilities belonging stromal tumor tissue, based Gaussian kernel density estimate calculated pattern","code":""},{"path":"/reference/GenerateTissue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Tissue — GenerateTissue","text":"","code":"GenerateTissue(   sim_object,   k = NA,   xmin = NA,   xmax = NA,   ymin = NA,   ymax = NA,   sdmin = 1/2,   sdmax = 2,   force = FALSE,   density_heatmap = FALSE,   step_size = 1,   cores = 1 )"},{"path":"/reference/GenerateTissue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Tissue — GenerateTissue","text":"sim_object SpatSimObj created CreateSimulationObject. k Number clusters generate pattern xmin Minimum x-coordinate cluster centers. xmax Maximum x-coordinate cluster centers. ymin Minimum y-coordinate cluster centers. ymax Maximum y-coordinate cluster centers. sdmin Minimum standard deviation cluster kernels. sdmax Maximum standard deviation cluster kernels. force Logical, whether force generation tissue even generated cluster centers fall outside simulation window. FALSE, error thrown cluster centers outside window. density_heatmap Logical, whether calculate density heatmap simulated tissue. TRUE, grid points generated covering entire simulation window, probability grid point belonging stroma calculated based generated tissue probability. step_size Grid step size density heatmap. cores Number cores use parallel processing density calculations.","code":""},{"path":"/reference/GenerateTissue.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Tissue — GenerateTissue","text":"modified 'Spatial Simulation Object' updated tissue grids assigned tissue types simulated pattern.","code":""},{"path":"/reference/GenerateTissue.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Tissue — GenerateTissue","text":"function generates simulated tissue pattern simulation object first generating k clusters within specified x y ranges standard deviation within specified range. , Gaussian kernel density estimate calculated pattern using generated clusters center points specified standard deviation kernel size. density estimates represent probability point simulation window belonging tumor stromal tissue. density_heatmap = TRUE, density heatmap calculated using grid points covering entire simulation window. Finally, simulated point, probability belonging stroma tissue calculated based kernel density estimate, tissue type assigned either \"Tumor\" \"Stroma\" using random sample probability proportional probability belonging stroma tissue.","code":""},{"path":"/reference/GenerateTissue.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Tissue — GenerateTissue","text":"","code":"# Create a simulation object with a window and point pattern sim_object <- CreateSimulationObject() #> No `window` specified - defaulting to x (0, 10); y (0, 10)  #simulate points sim_object <- GenerateSpatialPattern(sim_object, lambda = 20)  # Generate tissue with default parameters sim_object <- GenerateTissue(sim_object) #> Computing tissue probability #>    |                                                              |   0%, ETA NA   |=======================================                    |  67%, ETA 00:01   |=======================================================| 100%, Elapsed 00:02"},{"path":"/reference/PlotSimulation.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Simulation — PlotSimulation","title":"Plot Simulation — PlotSimulation","text":"Plot different aspects SpatSimObj","code":""},{"path":"/reference/PlotSimulation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Simulation — PlotSimulation","text":"","code":"PlotSimulation(   sim_object,   nrow = 1,   ncol = 1,   which = 1,   what = \"tissue heatmap\" )"},{"path":"/reference/PlotSimulation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Simulation — PlotSimulation","text":"sim_object SpatSimObj nrow Number rows plots (applicable one plot made) ncol Number columns plots (applicable one plot made) Index elements SpatSimObj plotted plot (\"tissue heatmap\", \"hole heatmap\", \"whole core\")","code":""},{"path":"/reference/PlotSimulation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Simulation — PlotSimulation","text":"plot grid plots, depending input arguments","code":""},{"path":"/reference/PlotSimulation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Simulation — PlotSimulation","text":"PlotSimulation function used plot different aspects SpatSimObj function takes sim_object first argument, object class \"Spatial Simulation Object\". function can used plot different aspects simulation, heatmaps tissue holes, plot whole core assigned cells colored type. set \"tissue heatmap\" \"hole heatmap\", function plot heatmaps specified tissue hole. set \"whole core\", function plot entire core assigned cells colored type. single element sim_object can plotted set \"whole core\". one plot made, nrow ncol can used specify number rows columns plot grid, respectively.","code":""},{"path":"/reference/PlotSimulation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Simulation — PlotSimulation","text":"","code":"# create a SpatSimObj sim_object <- CreateSimulationObject() #> No `window` specified - defaulting to x (0, 10); y (0, 10) sim_object = GenerateSpatialPattern(sim_object) sim_object = GenerateTissue(sim_object, density_heatmap = TRUE, step_size = 1, cores = 1) #> Computing density heatmap #>    |                                                              |   0%, ETA NA   |====================                                       |  33%, ETA 00:00   |=======================================                    |  67%, ETA 00:00   |=======================================================| 100%, Elapsed 00:00 #> Computing tissue probability #>    |                                                              |   0%, ETA NA   |====================                                       |  33%, ETA 00:03   |=======================================                    |  67%, ETA 00:01   |=======================================================| 100%, Elapsed 00:02 # plot a heatmap of tissue 1 PlotSimulation(sim_object, which = 1, what = \"tissue heatmap\")"},{"path":"/reference/SummariseSpatial.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise Spatial — SummariseSpatial","title":"Summarise Spatial — SummariseSpatial","text":"Summarise Spatial","code":""},{"path":"/reference/SummariseSpatial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise Spatial — SummariseSpatial","text":"","code":"SummariseSpatial(spatial_list, markers)"},{"path":"/reference/SummariseSpatial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise Spatial — SummariseSpatial","text":"spatial_list list spatial data frames markers column names markers names columns, probably cell types, contain 1s 0s representing positive/negative assignments","code":""},{"path":"/reference/SummariseSpatial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise Spatial — SummariseSpatial","text":"data frome summary counts proportions markers spatial data frame","code":""},{"path":"/reference/UpdateSimulationWindow.html","id":null,"dir":"Reference","previous_headings":"","what":"Update the simulation window in a SpatSimObj — UpdateSimulationWindow","title":"Update the simulation window in a SpatSimObj — UpdateSimulationWindow","text":"function updates simulation window SpatSimObj replacing existing window new one.","code":""},{"path":"/reference/UpdateSimulationWindow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update the simulation window in a SpatSimObj — UpdateSimulationWindow","text":"","code":"UpdateSimulationWindow(sim_object, window = NULL)"},{"path":"/reference/UpdateSimulationWindow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update the simulation window in a SpatSimObj — UpdateSimulationWindow","text":"sim_object SpatSimObj object window new owin object representing updated simulation window","code":""},{"path":"/reference/UpdateSimulationWindow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update the simulation window in a SpatSimObj — UpdateSimulationWindow","text":"updated SpatSimObj object","code":""},{"path":"/reference/UpdateSimulationWindow.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Update the simulation window in a SpatSimObj — UpdateSimulationWindow","text":"UpdateSimulationWindow() function checks input sim_object class 'SpatSimObj', input window null class 'owin'. checks pass, function updates simulation window input sim_object returns updated SpatSimObj object.","code":""},{"path":[]},{"path":"/reference/UpdateSimulationWindow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update the simulation window in a SpatSimObj — UpdateSimulationWindow","text":"","code":"# Create a simulation object sim_obj <- CreateSimulationObject() #> No `window` specified - defaulting to x (0, 10); y (0, 10)  # Update the simulation window new_window <- spatstat.geom::owin(c(0, 5), c(0, 5)) updated_sim_obj <- UpdateSimulationWindow(sim_obj, window = new_window)"},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::[\\%>\\%][magrittr::pipe] details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"/reference/plot.SpatSimObj.html","id":null,"dir":"Reference","previous_headings":"","what":"plot function for SpatSimObj — plot.SpatSimObj","title":"plot function for SpatSimObj — plot.SpatSimObj","text":"plot function SpatSimObj","code":""},{"path":"/reference/plot.SpatSimObj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plot function for SpatSimObj — plot.SpatSimObj","text":"","code":"# S3 method for SpatSimObj plot(x, ...)"},{"path":"/reference/plot.SpatSimObj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plot function for SpatSimObj — plot.SpatSimObj","text":"x class SpatSimObj ... things pass plot method SpatSimObj including nrow, ncol number rows columns plots, processes plot, currently works \"Processes\" may updated future","code":""},{"path":"/reference/summary.SpatSimObj.html","id":null,"dir":"Reference","previous_headings":"","what":"summary function for SpatSimObj — summary.SpatSimObj","title":"summary function for SpatSimObj — summary.SpatSimObj","text":"summary function SpatSimObj","code":""},{"path":"/reference/summary.SpatSimObj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"summary function for SpatSimObj — summary.SpatSimObj","text":"","code":"# S3 method for SpatSimObj summary(object, ...)"},{"path":"/reference/summary.SpatSimObj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"summary function for SpatSimObj — summary.SpatSimObj","text":"object class SpatSimObj ... nothing else pass summary object SpatSimObj","code":""},{"path":"/reference/wm.html","id":null,"dir":"Reference","previous_headings":"","what":"Round spatstat window — wm","title":"Round spatstat window — wm","text":"mask turns window spatstat round mimic window similar tissue microarray image scans","code":""},{"path":"/reference/wm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Round spatstat window — wm","text":"","code":"wm"},{"path":"/reference/wm.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Round spatstat window — wm","text":"owin object many slots describing size mask type mask","code":""}]
